TCS-Day-8
--------Topics-----------
Metric servers
describe resources
Networking in Kubernetes
Services and service type
Load balancer
ClusterIP
NodePort
Concept of reverse proxy
Ingress controller and ingress
-------------------------

Start :
Metric - system state resources status
monitoring of resources in k8s 
full monitoring stack - grafana prometheus alertmanager node exporter

metrics-server is a basic cpu mem monitoring resource from CLi

example -
node: kubectl top node
pod:  kubectl top pod 
Install metric server :
kubectl apply -f https://raw.githubusercontent.com/sharmavijay86/sharmavijay86.github.io/master/blog/k8ssetup/components.yaml
to check po : kubectl top pod -A
to check node: kubectl top node

-- resource request and resource limit definition in deployments 
request: if the said resource is not available on any node it will not launch 
limit: the resource can utilize maximum of defined limit resources on a node where it has been scheduled.

Cluster ip service type:
excercise- create 2 deployments name as tcsweb1 and tcsweb2 with image=nginx:1.22 with 2 replicas each 
expose service as cluster ip by port 8080 container port is 80
now delete one replicas describe svc and check the updated endpoint ip 

kubectl create deploy tcsweb1 --image=nginx:1.22 --replicas=2
kubectl create deploy tcsweb2 --image=nginx:1.22 --replicas=2
kubectl expose deploy tcsweb1 --port=8080 --target-port=80
kubectl expose deploy tcsweb2 --port=8080 --target-port=80
kubectl describe svc tcsweb1
take note of endpoint ip 
match with pod ip here : kubectl get po -owide

kubectl delete po <podname>

kubectl describe svc tcsweb1 ; take a note of endpoint ip t must be changed now .

Ingress controller - It is a reverse proxy application e.g. nginx, envoy, haproxy . it reads and response based on routing rule. 

Ingress - It is a routing rule definition based on host based oruting or path based routing

hostbased routing
   - abc.com -->svc1
   - xyz.com -->svc2
Path based routing
   - abc.com/ui ---> svc1
   - abc.com/api ---> svc2

Lab
deply a pod as deployment from image sharmavijay86/k8s-hello:v1
expose as service type cluster ip target port is 8080
create ingress on hostname  hello.tcslab.lan

--
kubectl create deploy hellok8s --image=sharmavijay86/hello-k8s:v1
kubectl expose deploy hellok8s --port=80 --target-port=8080
kubectl create ingress hellok8s --class=nginx --rule="hello.tcslab.lan/*=hellok8s:80"

add a host entry in local host file as
<linux machine ip>  hello.tcslab.lan

Now open browser and access
--


lab 
deploy nginx:1.22 as webapp named deployment
expose the service
create ingress to access this with hostname as web.tcslab.lan

excercise:-
Create a deployment named as tcsweb of image nginx:1.22 with 2 replicas
expose the service on port 9090
create ingress with name as tcsweb.tcslab.lan and access it .

Validate : curl http://tcsweb.tcslab.lan

