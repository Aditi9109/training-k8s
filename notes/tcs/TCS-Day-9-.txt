TCS-Day-9
------topics-------
statefullset & daemonset
configmaps secrets
Environments
storageclass & provisioner

-------------------
Stateless microservices/Applications.
 The applications state or data is not changing throughout the life cycle of the pod/container . example web nginx pod
Statefull microservices/Application
  The application state or data will get changed over the time throughout the life cycle of the pod/container. example  mongodb, mysql, mariadb etc.
---Types of storage
- Block storage        Are the raw volume, the volumes can be partitioned and formated with filesystem before use. This type of storage you can share at the same with more than 1 system.
- file system storage  - NFS,  CIFS 
- Object storage



--- Types of application deployments available in kubernetes
1) POD         - Any type of application can be deployed but no controller is controlling the workload hence cannnot use in production.
2) Deployment  - mainly the stateless type workloads. the pods are controlled by replicaset controller. recommended for any stateless workload and for prod environment or any environment.
3) Satefulset
4) Daemonset: It is basically a linux service in pod. These are mainly agent services controlled by kubernetes . Runs across all the kubernetes node and one count on each node only. Daemonset itself is a controller. Dameonset shares host node filesystem and host network hence it does not need to expose it as service. instead, the port on dameonset pod get exposed directoy to host. example nodeexporter, fluentbit, splunk agent, datadog agent.
pod, damonset, statfullset deployment

which needs a controller , deployment needs a controller
which dont need controller , POD, 
which one is manual - POD deployment
we need to create service to expose on above resource how many ?

---excercise1
Create a deployment headapp image nginx:1.22
expose svc named headapp with cluetrip on port 9090 pod port is 80
create another service named as headapp-headless expose on port 9090 pod port is 80 

validate : kubectl get svc -l app=headapp


 kubectl expose deploy headapp --port=9090 --target-port=80 --dry-run=client -o yaml > svc.yaml

----- Environments in deployment------
 kubectl run mydb --image=mysql:8 --env="MYSQL_ROOT_PASSWORD=redhat123"
 kubectl create deploy mydb --image=mysql:8 --dry-run=client -o yaml > mydbapp.yaml
      containers:
      - image: mysql:8
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: redhat123
kubectl exec -it mydb-79bbc647db-fzcsr -- sh
Data state in pods
- Config data
  configmaps
  secrets - encoded values of keys and files
    3 types of secrets 
       - docker-registry   Create a secret for use with a Docker registry
       - generic           Create a secret from a local file, directory, or literal value
       - tls               Create a TLS secret
kubectl create secret generic mysqlpass --from-literal=MYSQL_ROOT_PASSWORD=redhat123 --dry-run=client -o yaml

      containers:
      - image: mysql:8
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
               name: mysqlpass
               key: MYSQL_ROOT_PASSWORD
TLS cert 
openssl req -subj '/CN=hello.tcslab.lan/O=TCS Inc/C=IN' -new -newkey rsa:2048 -sha256 -days 365 -nodes -x509 -keyout server.key -out server.crt
kubectl create secret tls hello-tls --cert=server.crt --key=server.key
kubectl create deploy hellok8s --image=sharmavijay86/hello-k8s:v1
kubectl expose deploy hellok8s --port=80 --target-port=8080
kubectl create ingress hellok8s --class=nginx --rule="hello.tcslab.lan/*=hellok8s:80,tls=hello-tls"
Docker-registry secrets

kubectl create deploy privapp --image=reg.k8s.mevijay.dev/myrepo/nginx:alpine --dry-run=client -o yaml > privapp.yaml
kubectl create secret docker-registry regcred --docker-username=demo --docker-password=Admin@123 --docker-server=reg.k8s.mevijay.dev

    spec:
      imagePullSecrets:
        - name: regcred
      containers:
      - image: reg.k8s.mevijay.dev/myrepo/nginx:alpine
        name: nginx
COnfigMap - being used to mount a file 

cat index.html
<h1>Hello from ConfigMap</h1>


wget https://raw.githubusercontent.com/mevijays/training-k8s/main/kubernetes/yamls/configmaps/cm.yaml
modify the comfigmap data
kubectl apply -f https://raw.githubusercontent.com/mevijays/training-k8s/main/kubernetes/yamls/configmaps/cm.yaml

 kubectl exec -it privapp-68d7944559-nspw2 -- sh
 
  env  - 
- volume data