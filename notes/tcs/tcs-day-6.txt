tcs-day-6
POD operations
create - kubectl run mypod --image=nginx:1.22
delete - kubectl delete pod <podName>
list   - kubectl get pod
Excercise-1
Create a pod name web. use image nginx:1.23
validate with command output 
kubectl get po

=Namespace=
Logical named space. Help segregation of workloads and to asign and use resource qouta and limit
k8s default namespaces
    - default  - empty one and default space to launch / manage workloads if we are not expicitly defining a namespace
default  ---NS
    mypo
app1     ---NS
    mypo

Namespaces CLI managment
create : kubectl create ns app
list   : kubectl get ns
delete : kubectl delete ns <name>

create a pod in specific ns
kubectl run mypo --image=nginx:1.22  -n app
kubectl run mypo --image=nginx:1.22  -n anotherapp


excercise:
Create 2 namespace, tcsapp and tcsweb. deploy a pod name as webapp with image nginx:1.22 in both namespaces .

validate- kubectl get po -A

Deployment
create -
delete -
modify -

====Deployment======
Is a definition of the desired workload we want to run by k8s controller
deployment------>replicaset----->pod

mydep----->mydeb-dghs6------>mydeb-dghs6-87dhjj

cowin- portal as an example

- frontend  - reactjs
     registration- cowin.com/registration
     searching   - cowin.com/search
     ui-portal   - cowin.com
- backend   - api - java
     registration-api
     query-api
     backend-api
     entitlement-api
- database  - mongodb
what is monolith application architecture?
if all above stated content / features are running in one application and in one vm then this is monolith.

PROBLEM:
 redundancy
 scalability
 secuirty and patching
 performance

what is microservice
If we take a breakup of each feature and develop individual service to run them individually but intaract with each other to fullfill complete application requirement, this arranagment we called it as microservice.

------------
Deployment creation with replicas

kubectl create deploy mydeploy --image=nginx:1.22 --replicas=3 

want to scale fit the existing deployment replica

kubectl scale deploy mydeploy --replicas=1

---- Kubernetes sample yaml manifest file
apiVersion - resource api version - e. pod  v1, deploy apps/v1
     cmd:  kubectl api-resources
metadata
   name:
   label:
kind: pods
spec:
To generate yaml in dry-run mode
:  kubectl run pod mypod --image=nginx:1.22 --dry-run=client  -o yaml > pod.yaml

excercise-:  generate a yaml file for a deployment name as webdep  take image as nginx:1.22 
apply the yaml file to create resources.




